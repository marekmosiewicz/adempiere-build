/*
 * Copyright (c) 2020 Marek Mosiewicz
 */
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
//        classpath group: 'nebula', name: 'gradle-git-scm', version: '4.2.0'
        classpath group: 'org.ajoberstar.grgit', name: 'grgit-core', version: '3.0.0-beta.1'
        classpath group: 'de.undercouch', name: 'gradle-download-task', version: '4.0.4'
    }
}
plugins {
  //  id "nebula.gradle-git-scm" version "4.2.0"
    //id "com.netflix.nebula.gradle-git-scm-plugin" version "4.2.0"
    id "de.undercouch.download" version "4.0.4"
    id "org.ajoberstar.grgit" version "3.0.0-beta.1"
}

apply plugin: "org.ajoberstar.grgit"
apply plugin: "de.undercouch.download"

/*

task(downloadAneExtractZip) {
    ext.downloadAneExtractZip = { param1, param2 ->
        zipFileName = adempiereMetaDir + "/temp/" + param2 +".zip"
        if(!new File(zipFileName).exists()) {
            Download fetcher = new Download()
            fetcher.setSrc(param1)
            fetcher.setDest(zipFileName)
            UnpackFilest unzipper = new UnpackFiles()
            unzipper.setFrom(zipFileName);
            unzipper.setInto(adempiereMetaDir + "/servers/" + param2);
        }
    }

    doLast {
        downloadAneExtractZip(p1, p2) // This will resolve 'myMethod' defined in task
    }
}
*/
ext{
    adempiereMetaDir = rootProject.projectDir
    internalTaskCounter = 0
}

import org.ajoberstar.grgit.*

def String enlistTask(type, String dependecier){
    internalTaskCounter = internalTaskCounter + 1
    String taskNameInter = "inter_task_"+internalTaskCounter+"_group_"+dependecier
    Object task = tasks.create(taskNameInter, type)
    if(dependecier!=null) {
        tasks.findByPath(dependecier).dependsOn.add(task)
    }
    return taskNameInter
}
def getTask(name){
    return tasks.findByPath(name)
}

public class FileUtils {
    public static ensureDirExists(String dir) {
        println "Creating directory " + dir
        File file = new File(dir)
        file.mkdirs()
    }
    public static boolean isFileExists(String dir) {
        File file = new File(dir)
        return file.exists()
    }

}
public class CloneRepoTask extends DefaultTask {
    String destination;
    String repoURL;
    @TaskAction
    public void doClone() {
        FileUtils.ensureDirExists(destination)
        Object params = [dir: destination,uri:repoURL]
        Grgit.clone(params)
    }
}
def cloneRepo(String dest,String url,String dependencier){
    String adDirName = adempiereMetaDir
    String workingDir = adDirName+'/sources/'+dest
    if(!FileUtils.isFileExists(workingDir+"/.git")) {
        String taskName = enlistTask(CloneRepoTask, dependencier)
        Object task = getTask(taskName)
        task.destination = workingDir
        task.repoURL = url
    }
}
//TODO move repos to settings.gradle as list
task(clone){
    cloneRepo("adempiere","https://github.com/adempiere/adempiere.git",'clone')
    cloneRepo("adempiere-grpc","https://github.com/erpcya/adempiere-gRPC-Server.git",'clone')
    cloneRepo("adempiere-vue","https://github.com/adempiere/adempiere-vue.git",'clone')
}
task(downloadAll){

}
task(initialize){
    dependsOn clone,downloadAll
    //downloadAneExtractZip("https://download.jboss.org/wildfly/19.0.0.Final/wildfly-19.0.0.Final.zip","wildfly")
    //downloadAneExtractZip("https://apache.mirrors.tworzy.net/tomcat/tomcat-10/v10.0.0-M4/bin/apache-tomcat-10.0.0-M4.zip","tomcat")
}
//TODO configure new  instance to build and install
task(addInstance) {

}
//TODO build all projects
task(build) {

}
//TODO build all projects
task(deliverInstance) {

}

//TODO install all instances
task install {

}
task(pullAll) {

}
task(applyPatch) {

}
task(clean){

}
defaultTasks 'initialize'